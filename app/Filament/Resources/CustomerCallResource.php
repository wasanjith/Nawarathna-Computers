<?php

namespace App\Filament\Resources;

use App\Filament\Resources\CustomerCallResource\Pages;
use App\Models\CustomerCall;
Use App\Models\Device;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Table;

class CustomerCallResource extends Resource
{
    protected static ?string $model = CustomerCall::class;

    protected static ?string $navigationIcon = 'heroicon-o-phone';

    protected static ?string $navigationGroup = 'Customer Management';

    protected static ?string $navigationLabel = 'Customer Calls';

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Select::make('customer_id')
                    ->relationship('customer', 'name')
                    ->searchable()
                    ->preload()
                    ->required(),
                Forms\Components\DateTimePicker::make('called_at')
                    ->required()
                    ->default(now()),
                Forms\Components\Select::make('status')
                    ->options([
                        'answered' => 'Answered',
                        'no_answer' => 'No Answer',
                        'busy' => 'Busy',
                        'switched_off' => 'Switched Off',
                    ])
                    ->required()
                    ->default('no_answer'),
                Forms\Components\Textarea::make('notes')
                    ->maxLength(500)
                    ->columnSpanFull(),
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->query(CustomerCall::where('autogenerated', 1))
            ->columns([
                Tables\Columns\TextColumn::make('customer.name')
                    ->searchable()
                    ->sortable(),
                Tables\Columns\TextColumn::make('customer.phone')
                    ->label('Phone Number')
                    ->searchable(),
                Tables\Columns\TextColumn::make('device.name')
                    ->label('Device Name')
                    ->searchable(query: function ($query, string $search) {
                        return $query->orWhereHas('device', function ($q) use ($search) {
                            $q->where('brand', 'like', "%{$search}%")
                              ->orWhere('model', 'like', "%{$search}%");
                        });
                    })
                    ->sortable(query: function ($query, string $direction) {
                        return $query->orderBy(
                            \App\Models\Device::select('brand')->whereColumn('devices.id', 'customer_calls.device_id'),
                            $direction
                        );
                    })
                    ->default('No Device'),
                //device created at
                Tables\Columns\TextColumn::make('device.created_at')
                    ->label('Give Date')
                    ->date()
                    ->sortable(),
                Tables\Columns\TextColumn::make('due_date')
                    ->label('Due Date')
                    ->getStateUsing(function (CustomerCall $record) {
                        if ($record->device && $record->device->created_at) {
                            $daysDiff = now()->startOfDay()->diffInDays($record->device->created_at->startOfDay());
                            return $daysDiff . ' days';
                        }
                        return 'N/A';
                    })
                    ->sortable(query: function ($query, string $direction) {
                        return $query->orderBy(
                            \App\Models\Device::selectRaw('DATEDIFF(CURDATE(), DATE(created_at))')->whereColumn('devices.id', 'customer_calls.device_id'),
                            $direction
                        );
                    }),
            ])
            ->actions([
                Tables\Actions\Action::make('callhistory')
                    ->label('Call History')
                    ->icon('heroicon-o-eye')
                    ->url(fn(CustomerCall $record): string => route('customer.callhistory', ['customer' => $record->customer_id]))
                    ->openUrlInNewTab(),
            ]);
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCustomerCalls::route('/'),
            // 'create' => Pages\CreateCustomerCall::route('/create'),
            // 'edit' => Pages\EditCustomerCall::route('/{record}/edit'),
        ];
    }

    public static function canCreate(): bool
    {
        return false;
    }
}

